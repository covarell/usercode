process Alignment = {
    
    # initialize  MessageLogger
    service = MessageLogger { 
        untracked vstring destinations = { "cout", "alignment" } # .log automatically
		untracked vstring statistics = { "cout", "alignment"}
        
		untracked vstring categories = { "Alignment" }
		
		untracked PSet cout= { 
			untracked string threshold = "DEBUG" 
			untracked bool noLineBreaks = true 
		}
		untracked PSet alignment  = { 
			untracked string threshold = "INFO" 
			untracked PSet INFO = { untracked int32 limit = 0 }
			untracked PSet WARNING = { untracked int32 limit = 0 }
			untracked PSet ERROR = { untracked int32 limit = 0 }
			untracked PSet DEBUG = { untracked int32 limit = 0 }
			untracked PSet Alignment = { untracked int32 limit = -1}
			untracked bool noLineBreaks = true 
		}
          # vstring debugModules = { "TrackRefitter","AlignmentProducer" }
	}
	
	# initialize magnetic field
	include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
	include "MagneticField/Engine/data/uniformMagneticField.cfi"
        es_prefer = UniformMagneticFieldESProducer{}
        replace UniformMagneticFieldESProducer.ZFieldInTesla = 0.0

	# ideal geometry and interface
	include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
	include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
	
	# track selection for alignment
        # include "Alignment/CommonAlignmentProducer/data/AlignmentTrackSelector.cfi" 
	
	# Alignment producer
	include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cff"
        # replace AlignmentProducer.ParameterBuilder.Selector.alignParams = { "TIBSSLayers,100010" }
        replace AlignmentProducer.ParameterBuilder.Selector.alignParams = { "TIBSSLayers,100000,TIBSelOnly", "TOBSSLayers,100000,TOBSelOnly", "TIBDSLayersLayers22,101000,TIBSelOnly", "TOBDSLayersLayers11,101010,TOBSelOnly" }
        # replace AlignmentProducer.ParameterBuilder.Selector.TIBSelOnly.phiRanges = {1.067, 1.616}
        # replace AlignmentProducer.ParameterBuilder.Selector.TIBSelOnly.etaRanges = {0., 5.0}
        replace AlignmentProducer.ParameterBuilder.Selector.TIBSelOnly.zRanges = {0., 1000.}
        # replace AlignmentProducer.ParameterBuilder.Selector.TOBSelOnly.phiRanges = {1.067, 1.616}
        # replace AlignmentProducer.ParameterBuilder.Selector.TOBSelOnly.etaRanges = {0., 5.0}  
        replace AlignmentProducer.ParameterBuilder.Selector.TOBSelOnly.zRanges = {0., 1000.}
       
        # Hit selection for alignment
        replace HIPAlignmentAlgorithm.hitFilter = true
        replace HIPAlignmentAlgorithm.chargeCut = 65.   // ADC counts
        replace HIPAlignmentAlgorithm.phiMinCut = 0.95
        replace HIPAlignmentAlgorithm.phiMaxCut = 1.62
        replace HIPAlignmentAlgorithm.outlierCut = 1.0  // cm
 
        replace AlignmentProducer.isData = true
        replace AlignmentProducer.tkTag = TrackRefitter
        replace AlignmentProducer.tjTag = TrackRefitter

        # replace AlignmentProducer.doMisalignmentScenario = true
        replace AlignmentProducer.randomShift = 0.00
        replace AlignmentProducer.randomRotation = 0.00	
        replace AlignmentProducer.saveToDB = false

        replace HIPAlignmentAlgorithm.eventPrescale = 5
    
        # APE
        replace HIPAlignmentAlgorithm.apeParam = "linear" 
        replace HIPAlignmentAlgorithm.apeSPar = { 0.5, 0.4, 50. }
        replace HIPAlignmentAlgorithm.apeRPar = { 0.005, 0.004, 50. }

        # Track refitter (adapted to alignment needs)
        # include "RecoTracker/TransientTrackingRecHit/data/TransientTrackingRecHitBuilderWithoutRefit.cfi"
        include "RecoTracker/TransientTrackingRecHit/data/TransientTrackingRecHitBuilder.cfi" 
        include "RecoTracker/TrackProducer/data/RefitterWithMaterial.cff"
        replace TrackRefitter.src = "ctfWithMaterialTracksRED"
        replace TrackRefitter.TTRHBuilder = "WithTrackAngle"
        replace TrackRefitter.TrajectoryInEvent = true

      	########################### input files       
        # include "Alignment/CommonAlignmentProducer/data/data-FNAL.cfi"
        source = PoolSource { 
		
		untracked vstring fileNames = { 
                 #  "rfio:/castor/cern.ch/user/c/covarell/reducedRootfiles/dataRED-6215A-CTF.root",
                 #  "rfio:/castor/cern.ch/user/c/covarell/reducedRootfiles/dataRED-6215B-CTF.root",
                 #  "rfio:/castor/cern.ch/user/c/covarell/reducedRootfiles/dataRED-6217-CTF.root"
                  "rfio:/castor/cern.ch/user/c/covarell/reducedRootfiles/dataRED-6346-CTF.root",
                   "rfio:/castor/cern.ch/user/c/covarell/reducedRootfiles/dataRED-6474-85-CTF.root",
                   "rfio:/castor/cern.ch/user/c/covarell/reducedRootfiles/dataRED-6493-09-CTF.root"
                }
             	untracked int32 maxEvents   = 100
		untracked uint32 skipEvents = 0
	} 

        path p = { TrackRefitter }
    
        # REPLACEME (needed for inserting replace statements by perl script!)

}

