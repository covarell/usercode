process Alignment = {
 
	service = MessageLogger { 
		untracked vstring destinations = { "cout", "alignment" } 
		untracked vstring statistics = { "cout", "alignment" }
		untracked vstring categories = { "Alignment" }
		
		untracked PSet cout    = { 
			untracked string threshold = "DEBUG" 
			untracked bool noLineBreaks = true 
		}
		untracked PSet alignment  = { 
			untracked string threshold = "DEBUG" 
			untracked PSet INFO = { untracked int32 limit = 0 }
			untracked PSet WARNING = { untracked int32 limit = 0 }
			untracked PSet ERROR = { untracked int32 limit = 0 }
			untracked PSet DEBUG = { untracked int32 limit = -1 }
			untracked PSet Alignment = { untracked int32 limit = -1}
			untracked bool noLineBreaks = true 
		}
	}
	
        	# no magnetic field
        include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
	include "MagneticField/Engine/data/uniformMagneticField.cfi"
        es_prefer = UniformMagneticFieldESProducer{}
        replace UniformMagneticFieldESProducer.ZFieldInTesla = 0.0

	# ideal geometry and interface
	include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
	include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
	include "RecoTracker/GeometryESProducer/data/TrackerRecoGeometryESProducer.cfi"

        # stripCPE
        include "RecoLocalTracker/SiStripRecHitConverter/data/StripCPEfromTrackAngle.cfi"
        # pixelCPE
        include "RecoLocalTracker/SiPixelRecHits/data/PixelCPEParmError.cfi"
        # TransientTrackingBuilder
        include "RecoTracker/TransientTrackingRecHit/data/TransientTrackingRecHitBuilder.cfi" 

        # MeasurementTracker
        include "RecoTracker/MeasurementDet/data/MeasurementTrackerESProducer.cfi"
        replace MeasurementTracker.pixelClusterProducer = ""

        # the CosmicSeedFinder
        module cosmicseedrefitter = CosmicSeedGenerator {
          InputTag matchedRecHits = siStripMatchedRecHits:matchedRecHit
          InputTag rphirecHits    = siStripMatchedRecHits:rphiRecHit
          InputTag stereorecHits  = siStripMatchedRecHits:stereoRecHit
          double ptMin= 0.9
          double originRadius = 150
          double originHalfLength = 90
          double originZPosition = 0
          string TTRHBuilder        =  "WithTrackAngle"	
          untracked string GeometricStructure  = "STANDARD" //other choice: TIBD+   
       }

        # the CosmicTrackFinder
        module cosmictrackrefitter = CosmicTrackFinder { 
          bool TrajInEvents=true
          InputTag cosmicSeeds = cosmicseedrefitter:
          InputTag matchedRecHits = siStripMatchedRecHits:matchedRecHit
          InputTag rphirecHits    = siStripMatchedRecHits:rphiRecHit
          InputTag stereorecHits  = siStripMatchedRecHits:stereoRecHit
          string HitProducer        = "siStripRecHits"
          int32 MinHits=4
          double Chi2Cut=1000.
          string TTRHBuilder    =   "WithTrackAngle"
          untracked string GeometricStructure  = "MTCC"
          untracked bool debug = true
        }

        # the CombinatorialTrackFinder
        module combinatorialseedrefitter = CombinatorialSeedGeneratorForCosmics {
          InputTag matchedRecHits = siStripMatchedRecHits:matchedRecHit
          InputTag rphirecHits    = siStripMatchedRecHits:rphiRecHit
          InputTag stereorecHits  = siStripMatchedRecHits:stereoRecHit
          double SeedMomentum = 1    #initial momentum in GeV !!!	
          untracked string GeometricStructure  = "CkfTIF3" 
          string Matcher = "StandardMatcher"

         PSet UpperScintillatorParameters = {
           double WidthInX = 500      #half dimension in global X
           double LenghtInZ = 500     #half dimension in global Z	
           double GlobalX = 0         #scintillator's center position in global X
           double GlobalY = 300       #scintillator's center position in global Y
           double GlobalZ = 50        #scintillator's center position in global Z  
          }
         PSet LowerScintillatorParameters = {
           double WidthInX = 500      #half dimension in global X
           double LenghtInZ = 500     #half dimension in global Z
           double GlobalX = 0         #scintillator's center position in global X
           double GlobalY = -100      #scintillator's center position in global Y
           double GlobalZ = 50        #scintillator's center position in global Z
          }
        }

        include "RecoTracker/CkfPattern/data/CkfTrackCandidates.cff"
    
        replace ckfTrackCandidates.TrajectoryBuilder    = "GroupedCkfTrajectoryBuilder"
        replace ckfTrackCandidates.SeedProducer         = "combinatorialseedrefitter"
        replace GroupedCkfTrajectoryBuilder.ptCut               = 0.01
        replace GroupedCkfTrajectoryBuilder.maxLostHit          = 3
        replace GroupedCkfTrajectoryBuilder.maxConsecLostHit    = 1
        replace GroupedCkfTrajectoryBuilder.minimumNumberOfHits = 4

        #final fit
        module ctfWithMaterialTracks = TrackProducer {
          string Fitter = "KFFittingSmoother"
          string Propagator = "PropagatorWithMaterial"
          string src = "ckfTrackCandidates"
          string producer = ""
          string TTRHBuilder       =   "WithTrackAngle"
          bool TrajectoryInEvent = true
        }

        #track info
        include "AnalysisAlgos/TrackInfoProducer/data/TrackInfoProducer.cfi"
          
        # track selection for alignment
	module AlignmentTracks = AlignmentTrackSelectorModule {
                # for CosmicTF
		InputTag src = cosmictrackrefitter:
                # for CosmicTF
		# InputTag src = ctfWithMaterialTracks:
		bool filter = false
		
		bool applyBasicCuts = false
		double ptMin   = 10. 
		double ptMax   = 999.
		double etaMin  = -2.4
		double etaMax  =  2.4
		double phiMin  = -3.1416
		double phiMax  =  3.1416
		double nHitMin =  0
		double nHitMax = 99
		double chi2nMax= 999999.
		
		bool applyNHighestPt = false
		int32 nHighestPt = 2
		
		bool applyMultiplicityFilter = true
		int32 minMultiplicity = 1
	}

	# Alignment producer (incl refitter)
	include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cff"
        # replace AlignmentProducer.ParameterBuilder.Selector.alignParams = { "TIBLayers,100000" }

        replace AlignmentProducer.ParameterBuilder.Selector.alignParams = { "TIBRods,100010,TIBSelOnly" }
        replace AlignmentProducer.ParameterBuilder.Selector.TIBSelOnly.phiRanges = {-2.355, -0.785, 0.785, 2.355}
        replace AlignmentProducer.ParameterBuilder.Selector.TIBSelOnly.etaRanges = {0., 3.0} 
       
        # replace AlignmentProducer.doMisalignmentScenario = true
        replace AlignmentProducer.randomShift = 0.04
        replace AlignmentProducer.randomRotation = 0.02	
        replace CSA06AlignmentAlgorithm.eventPrescale = 1
    
        # APE
        replace CSA06AlignmentAlgorithm.apeParam = "linear" 
        replace CSA06AlignmentAlgorithm.apeSPar = { 0.08, 0.0, 30. }
        replace CSA06AlignmentAlgorithm.apeRPar = { 0.04, 0.0, 30. }

	# input files
	source = PoolSource { 
		
		untracked vstring fileNames = { 
                   "file:/data/covarell/joboutput/CosmicMuonSim_pre5/CosmicMuonSim.root"
		}

		untracked int32 maxEvents   = 100
		untracked uint32 skipEvents = 0
	
	}	    
       
        # For CosmicTF
        path p = { cosmicseedrefitter, cosmictrackrefitter }
        
        # For CombinatorialTF
        # path p = { combinatorialseedrefitter, ckfTrackCandidates, ctfWithMaterialTracks }
        
	# REPLACEME (needed for inserting replace statements by perl script!)

}

