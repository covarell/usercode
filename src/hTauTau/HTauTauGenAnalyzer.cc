// -*- C++ -*-
//
// Package:    GeneratorInterface
// Class:      HTauTauGenAnalyzer
// 
//
// Description: Module to analyze Pythia-EvtGen HepMCproducts
//
//
// Original Author:  Roberto Covarelli
//         Created:  April 26, 2007
//

#include <iostream>
#include <fstream>
 
#include "SimDataFormats/GeneratorProducts/interface/HepMCProduct.h"
 
// essentials !!!
#include "FWCore/Framework/interface/Event.h"
#include "DataFormats/Common/interface/Handle.h"
 
#include "TFile.h"
#include "TH1.h"
#include "TF1.h"
#include "TLorentzVector.h"
#include "TVector3.h"
#include "TObjArray.h"
 
#include "FWCore/Framework/interface/MakerMacros.h"

#include "GeneratorInterface/ExternalDecays/test/HTauTauGenAnalyzer.h"

using namespace edm;
using namespace std;
using namespace HepMC;
 
HTauTauGenAnalyzer::HTauTauGenAnalyzer( const ParameterSet& pset )
   : fOutputFileName( pset.getUntrackedParameter<string>("HistOutFile",std::string("TestBs.root")) ),
     theSrc( pset.getUntrackedParameter<string>("theSrc",std::string("source")) ), 
     fOutputFile(0)
{
}

void HTauTauGenAnalyzer::beginJob()
{
 
   nevent = 0;
   nHiggs = 0;

   fOutputFile   = new TFile( fOutputFileName.c_str(), "RECREATE" ) ;
   
   hTauStatus = new TH1D( "hTauStatus","Status of tau",  5, -0.5, 4.5) ;
   hTauIdDaugs = new TH1D( "hTauIdDaugs","LundIDs of tau daughters",  50, -500., 500.) ;
   hPtHiggs = new TH1D( "hPtHiggs", "Pt Higgs", 50,  0., 150. ) ;
   hPtTau = new TH1D( "hPtTau", "Pt Tau", 50,  0., 150. ) ;
   hPtMu = new TH1D( "hPtMu", "Pt Mu", 50,  0., 100. ) ;
   hPtEle = new TH1D( "hPtEle", "Pt Ele", 50,  0., 100. ) ;
   hEtaHiggs = new TH1D( "hEtaHiggs", "Eta Higgs", 50,  -7.0, 7.0 ) ;
   hEtaTau = new TH1D( "hEtaTau", "Eta Tau", 50,  -7.0, 7.0 ) ;
   hEtaMu = new TH1D( "hEtaMu", "Eta Mu", 50,  -7.0, 7.0 ) ;
   hEtaEle = new TH1D( "hEtaEle", "Eta Ele", 50,  -7.0, 7.0 ) ;
   hCosAngMuTau = new TH1D( "hCosAngMuTau", "cos(#theta_{#tau#mu})", 50,  0.7, 1.0 ) ;
   hCosAngEleTau = new TH1D( "hCosAngEleTau", "cos(#theta_{#tau e})", 50,  0.7, 1.0 ) ;

   decayed = new ofstream("decayed.txt") ;
   undecayed = new ofstream("undecayed.txt") ;
   return ;
}
 
void HTauTauGenAnalyzer::analyze( const Event& e, const EventSetup& )
{
      
   Handle< HepMCProduct > EvtHandle ;
   
   // find initial HepMCProduct by its label - source
   // OR
   // find HepMCProduct after evtgenlhc by its label - evtgenproducer, that is
   // 
   e.getByLabel( theSrc , EvtHandle ) ;
   
   const GenEvent* Evt = EvtHandle->GetEvent() ;
   if (Evt) nevent++;

   for ( GenEvent::particle_const_iterator p = Evt->particles_begin(); p != Evt->particles_end(); ++p ) {

     // look for a Higgs     
     if ( (*p)->pdg_id() == 25 )  {  // Higgs 
       // if ( abs((*p)->pdg_id()) > 0 )  {  // any particle  
       GenVertex* endvert = (*p)->end_vertex();
       if (endvert) {
	 hPtHiggs->Fill((*p)->momentum().perp());
	 hEtaHiggs->Fill((*p)->momentum().pseudoRapidity());

	 // loop 1 --> look for H -> tau tau -> e mu 
	 int theCodeProduct = 1;

	 for ( GenVertex::particles_out_const_iterator ap = endvert->particles_out_const_begin(); ap != endvert->particles_out_const_end(); ++ap ) {
	   if (abs((*ap)->pdg_id()) == 15) { 

	     hPtTau->Fill((*ap)->momentum().perp());
	     hTauStatus->Fill((*ap)->status());
	     hEtaTau->Fill((*ap)->momentum().pseudoRapidity());
	     *decayed << (*ap)->pdg_id() << " --> ";
	     
	     // Get rid of fake tau -> tau (gamma) vertices generated by Tauola
	     int tauVertId = (*ap)->end_vertex()->barcode();  
	     bool goodTau = false;
	     while (!goodTau) {
	       goodTau = true;
	       const GenVertex* tauvert = Evt->barcode_to_vertex(tauVertId);
	       for ( GenVertex::particles_out_const_iterator bp = tauvert->particles_out_const_begin(); bp != tauvert->particles_out_const_end(); ++bp ) {
		 if (abs((*bp)->pdg_id()) == 15) {  
		   goodTau = false;
		   tauVertId = (*bp)->end_vertex()->barcode();
		 }
	       }
	     }

             const GenVertex* tauvert2 = Evt->barcode_to_vertex(tauVertId);
	     for ( GenVertex::particles_out_const_iterator cp = tauvert2->particles_out_const_begin(); cp != tauvert2->particles_out_const_end(); ++cp ) {
	       
	       hTauIdDaugs->Fill((*cp)->pdg_id());
	       *decayed << (*cp)->pdg_id() << " ";
	       if (abs((*cp)->pdg_id()) == 11 || abs((*cp)->pdg_id()) == 13) 
		 theCodeProduct *= (*cp)->pdg_id();
	     }
	     *decayed << "\n";
	   }
	 }

	 if (theCodeProduct != -143) continue; // only e-mu opposite sign 
	                                       // -(13*11) = -143
	 
	 nHiggs++;
       
	 // loop 2 --> fill e mu quantities 
	 for ( GenVertex::particles_out_const_iterator ap = endvert->particles_out_const_begin(); ap != endvert->particles_out_const_end(); ++ap ) {
	   if (abs((*ap)->pdg_id()) == 15) {
	      
	     // Get rid of fake tau -> tau (gamma) vertices generated by Tauola
	     int tauVertId = (*ap)->end_vertex()->barcode();  
	     bool goodTau = false;
	     while (!goodTau) {
	       goodTau = true;
	       const GenVertex* tauvert = Evt->barcode_to_vertex(tauVertId);
	       for ( GenVertex::particles_out_const_iterator bp = tauvert->particles_out_const_begin(); bp != tauvert->particles_out_const_end(); ++bp ) {
		 if (abs((*bp)->pdg_id()) == 15) {  
		   goodTau = false;
		   tauVertId = (*bp)->end_vertex()->barcode();
		 }
	       }
	     }

             const GenVertex* tauvert2 = Evt->barcode_to_vertex(tauVertId);
	     for ( GenVertex::particles_out_const_iterator cp = tauvert2->particles_out_const_begin(); cp != tauvert2->particles_out_const_end(); ++cp ) {

	       TLorentzVector pta((*ap)->momentum().px(), 
				  (*ap)->momentum().py(),
				  (*ap)->momentum().pz(), 
				  (*ap)->momentum().e());
	       TLorentzVector pl((*cp)->momentum().px(), 
				 (*cp)->momentum().py(),
				 (*cp)->momentum().pz(), 
				 (*cp)->momentum().e());
	       if (abs((*cp)->pdg_id()) == 11) {  // e
		 hPtEle->Fill((*cp)->momentum().perp());
		 hEtaEle->Fill((*cp)->momentum().pseudoRapidity());     
		 hCosAngEleTau->Fill( cos( pl.Vect().Angle(pta.Vect())));
	       } else if (abs((*cp)->pdg_id()) == 13) {  // mu
		 hPtMu->Fill((*cp)->momentum().perp());
		 hEtaMu->Fill((*cp)->momentum().pseudoRapidity());
		 hCosAngMuTau->Fill( cos( pl.Vect().Angle(pta.Vect()))) ;
	       }
	     }
	   }
	 }
       }
     }
   }

   return ;   
}

void HTauTauGenAnalyzer::endJob()
{
  TObjArray Hlist(0);
  Hlist.Add(hTauStatus) ;	   
  Hlist.Add(hTauIdDaugs) ;
  Hlist.Add(hPtHiggs) ;
  Hlist.Add(hEtaHiggs) ;
  Hlist.Add(hPtTau) ;
  Hlist.Add(hEtaTau) ;
  Hlist.Add(hPtMu) ;
  Hlist.Add(hEtaMu) ;
  Hlist.Add(hPtEle) ;
  Hlist.Add(hEtaEle) ;
  Hlist.Add(hCosAngMuTau) ;
  Hlist.Add(hCosAngEleTau) ;


  Hlist.Write() ;
  fOutputFile->Close() ;
  cout << "N_events = " << nevent << "\n";
  cout << "N(H -> tau tau -> e mu) = " << nHiggs << "\n"; 
  return ;
}
 
DEFINE_FWK_MODULE(HTauTauGenAnalyzer);
