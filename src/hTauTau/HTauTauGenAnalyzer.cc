// -*- C++ -*-
//
// Package:    GeneratorInterface
// Class:      HTauTauGenAnalyzer
// 
//
// Description: Module to analyze Pythia-EvtGen HepMCproducts
//
//
// Original Author:  Roberto Covarelli
//         Created:  April 26, 2007
//

#include "GeneratorInterface/ExternalDecays/test/HTauTauGenAnalyzer.h"

using namespace edm;
using namespace std;
using namespace HepMC;
 
HTauTauGenAnalyzer::HTauTauGenAnalyzer( const ParameterSet& pset )
   : fOutputFileName( pset.getUntrackedParameter<string>("HistOutFile",std::string("TestBs.root")) ),
     theSrc( pset.getUntrackedParameter<string>("theSrc",std::string("source")) ), 
     fOutputFile(0)
{
}

void HTauTauGenAnalyzer::beginJob()
{
 
   nevent = 0;
   nHiggs = 0;

   fOutputFile   = new TFile( fOutputFileName.c_str(), "RECREATE" ) ;
   
   hTauStatus = new TH1D( "hTauStatus","Status of tau",  5, -0.5, 4.5) ;
   hTauIdDaugs = new TH1D( "hTauIdDaugs","LundIDs of tau daughters",  50, -500., 500.) ;
   hPtHiggs = new TH1D( "hPtHiggs", "Pt Higgs", 50,  0., 150. ) ;
   hPtTau = new TH1D( "hPtTau", "Pt Tau", 50,  0., 150. ) ;
   hPtMu = new TH1D( "hPtMu", "Pt Mu", 50,  0., 100. ) ;
   hPtEle = new TH1D( "hPtEle", "Pt Ele", 50,  0., 100. ) ;
   hEtaHiggs = new TH1D( "hEtaHiggs", "Eta Higgs", 50,  -7.0, 7.0 ) ;
   hEtaTau = new TH1D( "hEtaTau", "Eta Tau", 50,  -7.0, 7.0 ) ;
   hEtaMu = new TH1D( "hEtaMu", "Eta Mu", 50,  -7.0, 7.0 ) ;
   hEtaEle = new TH1D( "hEtaEle", "Eta Ele", 50,  -7.0, 7.0 ) ;
   hCosAngMuTau = new TH1D( "hCosAngMuTau", "cos(#theta_{#tau#mu})", 50,  0.7, 1.0 ) ;
   hCosAngEleTau = new TH1D( "hCosAngEleTau", "cos(#theta_{#tau e})", 50,  0.7, 1.0 ) ;
   hEtMiss = new TH1D( "hEtMiss", "Missing Et", 50,  0., 150. ) ;
   hMtMEtMu = new TH1D( "hMtMEtMu", "Mt EtMiss + Mu", 50,  0., 150. ) ;
   hMtMEtEle = new TH1D( "hMtMEtEle", "Mt EtMiss + Ele", 50,  0., 150. ) ;
   hMassMuEle = new TH1D( "hMassMuEle", "Mass Ele + Mu", 50,  0., 150. ) ;
   hVisibleMass = new TH1D( "hVisibleMass", "Visible Mass", 50,  0., 150. ) ;
   hBersaniMass = new TH1D( "hBersaniMass", "Bersani Mass", 50,  0., 150. ) ;
   hSelMtMEtMu = new TH1D( "hSelMtMEtMu", "Mt EtMiss + Mu", 50,  0., 150. ) ;
   hSelMtMEtEle = new TH1D( "hSelMtMEtEle", "Mt EtMiss + Ele", 50,  0., 150. ) ;
   hSelMassMuEle = new TH1D( "hSelMassMuEle", "Mass Ele + Mu", 50,  0., 150. ) ;
   hSelVisibleMass = new TH1D( "hSelVisibleMass", "Visible Mass", 50,  0., 150. ) ;
   hSelBersaniMass = new TH1D( "hSelBersaniMass", "Bersani Mass", 50,  0., 150. ) ;
   hCosHelAngEle = new TH1D( "hCosHelAngEle", "Ele helicity angle", 50,  -1., 1. ) ;     
   hCosHelAngMu = new TH1D( "hCosHelAngMu", "Mu helicity angle", 50,  -1., 1. ) ;     	     
   hCosHelAngTau = new TH1D( "hCosHelAngTau", "Tau helicity angle", 50,  -1., 1. ) ; 
   hTransvCosHelAngTau = new TH1D( "hTransvCosHelAngTau", "Transverse tau helicity angle", 50,  -1., 1. ) ; 
   hApproxCosHelAngEle = new TH1D( "hApproxCosHelAngEle", "Ele approximated helicity angle", 50,  -1., 1. ) ;     
   hApproxCosHelAngMu = new TH1D( "hApproxCosHelAngMu", "Mu approximated helicity angle", 50,  -1., 1. ) ;
   hTransvCosHelAngEle = new TH1D( "hTransvCosHelAngEle", "Ele transverse helicity angle", 50,  -1., 1. ) ;
   hTransvCosHelAngMu = new TH1D( "hTransvCosHelAngMu", "Mu transverse helicity angle", 50,  -1., 1. ) ;

   decayed = new ofstream("decayed.txt") ;
   undecayed = new ofstream("undecayed.txt") ;
   return ;
}
 
int HTauTauGenAnalyzer::trueVertex(const GenEvent* Evt, const GenParticle *aPart) {

  // Get rid of fake tau -> tau (gamma) vertices generated by Tauola
  int tauVertId = aPart->end_vertex()->barcode();  
  bool goodTau = false;
  while (!goodTau) {
    goodTau = true;
    const GenVertex* tauvert = Evt->barcode_to_vertex(tauVertId);
    for ( GenVertex::particles_out_const_iterator bp = tauvert->particles_out_const_begin(); bp != tauvert->particles_out_const_end(); ++bp ) {
      if (abs((*bp)->pdg_id()) == 15) {  
	goodTau = false;
	tauVertId = (*bp)->end_vertex()->barcode();
      }
    }
  }
  return tauVertId;

}

void HTauTauGenAnalyzer::analyze( const Event& e, const EventSetup& )
{
      
   Handle< HepMCProduct > EvtHandle ;
   
   // find initial HepMCProduct by its label - source
   // OR
   // find HepMCProduct after evtgenlhc by its label - evtgenproducer, that is
   // 
   e.getByLabel( theSrc , EvtHandle ) ;
   
   const GenEvent* Evt = EvtHandle->GetEvent() ;
   if (Evt) nevent++;

   for ( GenEvent::particle_const_iterator p = Evt->particles_begin(); p != Evt->particles_end(); ++p ) {

     // look for a Higgs     
     // if ( (*p)->pdg_id() == 25 )  {  // Higgs or Z
     if ( abs((*p)->pdg_id()) > 0 )  {  // any particle  
       GenVertex* endvert = (*p)->end_vertex();
       if (endvert) {

         unsigned int nTau = 0;
	 for ( GenVertex::particles_out_const_iterator ap = endvert->particles_out_const_begin(); ap != endvert->particles_out_const_end(); ++ap ) {
	   if (abs((*ap)->pdg_id()) == 15) nTau++;
	 } 

	 if (nTau != 2) continue;

	 TLorentzVector phiggs((*p)->momentum().px(), 
			       (*p)->momentum().py(),
			       (*p)->momentum().pz(), 
			       (*p)->momentum().e());
	 TVector3 boosterH = - ( phiggs.BoostVector() );

	 TLorentzVector truepthiggs((*p)->momentum().px(), 
				    (*p)->momentum().py(), 0., 
				    sqrt(8281. + pow((*p)->momentum().px(),2) 
					 + pow((*p)->momentum().py(),2)));
	 TVector3 boosterHt = - ( truepthiggs.BoostVector() );

	 hPtHiggs->Fill((*p)->momentum().perp());
	 hEtaHiggs->Fill((*p)->momentum().pseudoRapidity());

	 // loop 1 --> look for H -> tau tau -> e mu 
	 int theCodeProduct = 1;
	 TLorentzVector pmiss;
	 TLorentzVector pmu;
	 TLorentzVector pele;

	 for ( GenVertex::particles_out_const_iterator ap = endvert->particles_out_const_begin(); ap != endvert->particles_out_const_end(); ++ap ) {
	   if (abs((*ap)->pdg_id()) == 15) { 

	     hPtTau->Fill((*ap)->momentum().perp());
	     hTauStatus->Fill((*ap)->status());
	     hEtaTau->Fill((*ap)->momentum().pseudoRapidity());
	     *decayed << (*ap)->pdg_id() << " --> ";

	     TLorentzVector pta((*ap)->momentum().px(), 
				(*ap)->momentum().py(),
				(*ap)->momentum().pz(), 
				(*ap)->momentum().e());
	     TLorentzVector trueptta((*ap)->momentum().px(), 
				      (*ap)->momentum().py(), 0., 
				      sqrt(2.89 + pow((*p)->momentum().px(),2) 
					   + pow((*p)->momentum().py(),2)));
	     pta.Boost( boosterH );
	     hCosHelAngTau->Fill( cos( pta.Vect().Angle(phiggs.Vect())) );
	     trueptta.Boost( boosterHt );
	     hTransvCosHelAngTau->Fill( cos( trueptta.Vect().Angle(truepthiggs.Vect())) );
	     
	     int tauVertId = trueVertex(Evt, *ap);  
	    
             const GenVertex* tauvert2 = Evt->barcode_to_vertex(tauVertId);
	     for ( GenVertex::particles_out_const_iterator cp = tauvert2->particles_out_const_begin(); cp != tauvert2->particles_out_const_end(); ++cp ) {
	       
	       hTauIdDaugs->Fill((*cp)->pdg_id());
	       *decayed << (*cp)->pdg_id() << " ";
	       if (abs((*cp)->pdg_id()) == 11 || abs((*cp)->pdg_id()) == 13) 
		 theCodeProduct *= (*cp)->pdg_id();
	     }
	     *decayed << "\n";
	   }
	 }

	 if (theCodeProduct != -143) continue; // only e-mu opposite sign 
	                                       // -(13*11) = -143
	 
	 nHiggs++;
       
	 // loop 2 --> fill e mu quantities 
	 for ( GenVertex::particles_out_const_iterator ap = endvert->particles_out_const_begin(); ap != endvert->particles_out_const_end(); ++ap ) {
	   if (abs((*ap)->pdg_id()) == 15) {
	      
	     int tauVertId = trueVertex(Evt, *ap);

             const GenVertex* tauvert2 = Evt->barcode_to_vertex(tauVertId);
	     for ( GenVertex::particles_out_const_iterator cp = tauvert2->particles_out_const_begin(); cp != tauvert2->particles_out_const_end(); ++cp ) {

	       TLorentzVector pta((*ap)->momentum().px(), 
				  (*ap)->momentum().py(),
				  (*ap)->momentum().pz(), 
				  (*ap)->momentum().e());
	       TVector3 boosterTa = - ( pta.BoostVector() );
	       TLorentzVector pl((*cp)->momentum().px(), 
				 (*cp)->momentum().py(),
				 (*cp)->momentum().pz(), 
				 (*cp)->momentum().e());
	       if (abs((*cp)->pdg_id()) == 11) {  // e
		 pele = pl;
		 // lab frame
		 hPtEle->Fill((*cp)->momentum().perp());
		 hEtaEle->Fill((*cp)->momentum().pseudoRapidity());     
		 hCosAngEleTau->Fill( cos( pl.Vect().Angle(pta.Vect())));
		 // own frames
		 TLorentzVector ptemp = pl;
		 pl.Boost( boosterTa );
		 hCosHelAngEle->Fill( cos( pl.Vect().Angle(pta.Vect())) );
		 ptemp.Boost( boosterH );
		 hApproxCosHelAngEle->Fill( cos( ptemp.Vect().Angle(phiggs.Vect())) );
	       } else if (abs((*cp)->pdg_id()) == 13) {  // mu
		 pmu = pl;
		 // lab frame
		 hPtMu->Fill((*cp)->momentum().perp());
		 hEtaMu->Fill((*cp)->momentum().pseudoRapidity());
		 hCosAngMuTau->Fill( cos( pl.Vect().Angle(pta.Vect()))) ;
		 // own frames
		  // own frames
		 TLorentzVector ptemp = pl;
		 pl.Boost( boosterTa );
		 hCosHelAngMu->Fill( cos( pl.Vect().Angle(pta.Vect())) );
		 ptemp.Boost( boosterH );
		 hApproxCosHelAngMu->Fill( cos( ptemp.Vect().Angle(phiggs.Vect())) );
	       } else {   // neutrinos
		 pmiss += pl;
	       }
	     }
	   }
	 }
	 
	 hEtMiss->Fill(pmiss.Perp());

         // Calculate h -> tau tau observables
	 TLorentzVector ptele(pele.X(),pele.Y(),
			      0.,sqrt(pow(pele.X(),2) + pow(pele.Y(),2)));
	 TLorentzVector ptmu(pmu.X(),pmu.Y(),
			      0.,sqrt(pow(pmu.X(),2) + pow(pmu.Y(),2)));
	 TLorentzVector ptmiss(pmiss.X(),pmiss.Y(),
			      0.,sqrt(pow(pmiss.X(),2) + pow(pmiss.Y(),2)));
	 TLorentzVector emet = ptele + ptmiss;
	 TLorentzVector mumet = ptmu + ptmiss;
	 TLorentzVector emu = pele + pmu;
	 TLorentzVector emumiss = emu + ptmiss;
         TLorentzVector pthiggs = ptele + ptmu + ptmiss;

	 // test: force Z mass
	 pthiggs.SetE(sqrt(8281. + pow(pthiggs.X(),2) + pow(pthiggs.Y(),2)));

	 float xtau1 = (pele.X()*pmu.Y() - pele.Y()*pmu.X())/(pthiggs.X()*pmu.Y() - pthiggs.Y()*pmu.X());
	 float xtau2 = (pele.Y()*pmu.X() - pele.X()*pmu.Y())/(pthiggs.X()*pele.Y() - pthiggs.Y()*pele.X());
	 // cout << xtau1 << " " << xtau2 << endl;

	 hMtMEtEle->Fill(emet.Perp());
	 hMtMEtMu->Fill(mumet.Perp());
	 hMassMuEle->Fill(emu.M());
	 hVisibleMass->Fill(emumiss.M());
	 hBersaniMass->Fill(emu.M()/sqrt(xtau1*xtau2));

         TVector3 TransvBooster = - ( pthiggs.BoostVector() );
	 ptele.Boost( TransvBooster );
	 ptmu.Boost( TransvBooster );
	 hTransvCosHelAngEle->Fill( cos( ptele.Vect().Angle(pthiggs.Vect())) );
	 hTransvCosHelAngMu->Fill( cos( ptmu.Vect().Angle(pthiggs.Vect())) );

	 // Reasonable offline cuts
	 if (pmu.Perp() > 10 && pele.Perp() > 15) {
	   hSelMtMEtEle->Fill(emet.Perp());
	   hSelMtMEtMu->Fill(mumet.Perp());
	   hSelMassMuEle->Fill(emu.M());
	   hSelVisibleMass->Fill(emumiss.M());
	   hSelBersaniMass->Fill(emu.M()/sqrt(xtau1*xtau2));
	 }

       }
     }
   }

   return ;   
}

void HTauTauGenAnalyzer::endJob()
{
  TObjArray Hlist(0);
  Hlist.Add(hTauStatus) ;	   
  Hlist.Add(hTauIdDaugs) ;
  Hlist.Add(hPtHiggs) ;
  Hlist.Add(hEtaHiggs) ;
  Hlist.Add(hPtTau) ;
  Hlist.Add(hEtaTau) ;
  Hlist.Add(hPtMu) ;
  Hlist.Add(hEtaMu) ;
  Hlist.Add(hPtEle) ;
  Hlist.Add(hEtaEle) ;
  Hlist.Add(hCosAngMuTau) ;
  Hlist.Add(hCosAngEleTau) ;
  Hlist.Add(hEtMiss);
  Hlist.Add(hMtMEtMu); 
  Hlist.Add(hMtMEtEle);
  Hlist.Add(hMassMuEle);
  Hlist.Add(hVisibleMass);
  Hlist.Add(hBersaniMass);
  Hlist.Add(hSelMtMEtMu); 
  Hlist.Add(hSelMtMEtEle);
  Hlist.Add(hSelMassMuEle);
  Hlist.Add(hSelVisibleMass);
  Hlist.Add(hSelBersaniMass);
  Hlist.Add(hCosHelAngEle) ;       
  Hlist.Add(hCosHelAngMu) ;	     
  Hlist.Add(hCosHelAngTau) ;  
  Hlist.Add(hTransvCosHelAngTau) ;
  Hlist.Add(hApproxCosHelAngEle) ;
  Hlist.Add(hApproxCosHelAngMu) ;
  Hlist.Add(hTransvCosHelAngEle) ;
  Hlist.Add(hTransvCosHelAngMu) ;

  Hlist.Write() ;
  fOutputFile->Close() ;
  cout << "N_events = " << nevent << "\n";
  cout << "N(H -> tau tau -> e mu) = " << nHiggs << "\n"; 
  return ;
}
 
DEFINE_FWK_MODULE(HTauTauGenAnalyzer);
